---
- name: Ensure dotfiles repository is cloned locally.
  git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_repo_local_destination }}"
    version: "{{ dotfiles_repo_version }}"
    accept_hostkey: "{{ dotfiles_repo_accept_hostkey }}"
    update: no
  become: false

- name: Ensure all configured dotfiles are links.
  stat:
    path: "{{ dotfiles_home }}/{{ dotfiles_prefix }}{{ item }}"
    get_checksum: no
  register: existing_dotfile_info
  loop: "{{ dotfiles_files }}"

- name: Backup existing dotfiles file if a replacement is being linked.
  copy:
    src: "{{ item.stat.path }}"
    dest: "{{ item.stat.path }}.orig"
    remote_src: yes
  when:
    - dotfiles_backup_existing|default(false)|bool
    - item.stat.islnk is defined and item.stat.islnk == False
  loop: "{{ existing_dotfile_info.results|flatten(levels=1) }}"

- name: Remove existing dotfiles file if a replacement is being linked.
  file:
    path: "{{ item.stat.path }}"
    state: absent
  when: item.stat.islnk is defined and item.stat.islnk == False
  loop: "{{ existing_dotfile_info.results|flatten(levels=1) }}"

- name: Link dotfiles into home folder.
  file:
    src: "{{ dotfiles_repo_local_destination }}/{{ item }}"
    dest: "{{ dotfiles_home }}/{{ dotfiles_prefix }}{{ item }}"
    state: link
    force: "{{ dotfiles_force_links|default(false) }}"
  become: false
  loop: "{{ dotfiles_files }}"
